-- Serviços principais
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

-- Aba Troll
local Troll = Window:MakeTab({
    Title = "Troll",
    Icon = "rbxassetid://10723415903"
})

-- Variáveis globais
local selectedPlayerName = nil
local methodKill = nil

-- Função para retornar o jogador selecionado
local function GetSelectedPlayer()
    if selectedPlayerName then
        local player = Players:FindFirstChild(selectedPlayerName)
        if player then
            return player
        end
    end
    return nil
end

-- Dropdown: Selecionar Jogador
local killDropdown = Troll:AddDropdown({
    Name = "Selecionar Jogador",
    Options = (function()
        local list = {}
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
                table.insert(list, player.Name)
            end
        end
        return list
    end)(),
    Default = "",
    Callback = function(value)
        selectedPlayerName = value
        getgenv().Target = value
        print("Jogador selecionado: " .. tostring(value))
    end
})

-- Inicializa automaticamente com o primeiro player (se houver)
local initialList = killDropdown.Options
if #initialList > 0 then
    selectedPlayerName = initialList[1]
    getgenv().Target = selectedPlayerName
    killDropdown:SetValue(selectedPlayerName)
    print("Jogador inicial selecionado: " .. selectedPlayerName)
end

-- Botão: Atualizar lista de jogadores
Troll:AddButton({
    Name = "Atualizar Player List",
    Callback = function()
        local newList = {}
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
                table.insert(newList, player.Name)
            end
        end
        killDropdown:Set(newList)
        print("Lista de jogadores atualizada: ", table.concat(newList, ", "))

        if selectedPlayerName and not Players:FindFirstChild(selectedPlayerName) then
            selectedPlayerName = nil
            getgenv().Target = nil
            killDropdown:SetValue("")
            print("Jogador selecionado saiu, seleção resetada.")
        elseif not selectedPlayerName and #newList > 0 then
            -- Define um novo jogador padrão caso anterior tenha saído
            selectedPlayerName = newList[1]
            getgenv().Target = selectedPlayerName
            killDropdown:SetValue(selectedPlayerName)
            print("Novo jogador selecionado automaticamente: " .. selectedPlayerName)
        end
    end
})

-- Botão: Teleportar até o player
Troll:AddButton({
    Name = "Teleportar até o Player",
    Callback = function()
        local target = GetSelectedPlayer()
        if not target then
            print("Erro: Nenhum jogador selecionado ou jogador não encontrado.")
            return
        end

        local char = LocalPlayer.Character
        local root = char and char:FindFirstChild("HumanoidRootPart")
        if not root then
            warn("Erro: HumanoidRootPart não encontrado.")
            return
        end

        if target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
            root.CFrame = target.Character.HumanoidRootPart.CFrame
        else
            print("Erro: Jogador alvo inválido.")
        end
    end
})

-- Toggle: Spectar jogador
Troll:AddToggle({
    Name = "Spectar Player",
    Default = false,
    Callback = function(enabled)
        local camera = workspace.CurrentCamera

        local function UpdateCam()
            if enabled then
                local target = GetSelectedPlayer()
                if target and target.Character then
                    local hum = target.Character:FindFirstChild("Humanoid")
                    if hum then
                        camera.CameraSubject = hum
                    end
                end
            else
                if LocalPlayer.Character then
                    local hum = LocalPlayer.Character:FindFirstChild("Humanoid")
                    if hum then
                        camera.CameraSubject = hum
                    end
                end
            end
        end

        if enabled then
            if not getgenv().CameraConnection then
                getgenv().CameraConnection = RunService.Heartbeat:Connect(UpdateCam)
            end
        else
            if getgenv().CameraConnection then
                getgenv().CameraConnection:Disconnect()
                getgenv().CameraConnection = nil
            end
            UpdateCam()
        end
    end
})

-- Seção de métodos
Troll:AddSection({ Name = "Métodos" })

-- Dropdown: Método de morte
Troll:AddDropdown({
    Name = "Selecionar Método para Matar",
    Options = {"Bus"},
    Default = "",
    Callback = function(value)
        methodKill = value
        print("Método selecionado: " .. tostring(value))
    end
})

-- Botão: Matar jogador
Troll:AddButton({
    Name = "Matar Player",
    Callback = function()
        if methodKill ~= "Bus" then
            print("Erro: Método não suportado.")
            return
        end

        local char = LocalPlayer.Character
        local root = char and char:FindFirstChild("HumanoidRootPart")
        if not root then
            warn("Erro: HumanoidRootPart não encontrado.")
            return
        end

        local originalPos = root.CFrame

        -- Buscar ônibus do player
        local function GetBus()
            local vehicles = workspace:FindFirstChild("Vehicles")
            return vehicles and vehicles:FindFirstChild(LocalPlayer.Name .. "Car")
        end

        local bus = GetBus()

        if not bus then
            root.CFrame = CFrame.new(1118.81, 75.998, -1138.61)
            task.wait(0.5)
            local remote = ReplicatedStorage:FindFirstChild("RE")
            if remote and remote:FindFirstChild("1Ca1r") then
                remote["1Ca1r"]:FireServer("PickingCar", "SchoolBus")
            end
            task.wait(1)
            bus = GetBus()
        end

        -- Entrar no ônibus
        if bus then
            local seat = bus:FindFirstChild("Body") and bus.Body:FindFirstChild("VehicleSeat")
            if seat and char:FindFirstChildOfClass("Humanoid") and not char.Humanoid.Sit then
                repeat
                    root.CFrame = seat.CFrame * CFrame.new(0, 2, 0)
                    task.wait()
                until char.Humanoid.Sit or not bus.Parent

                if char.Humanoid.Sit or not bus.Parent then
                    for _, v in pairs(bus.Body:GetChildren()) do
                        if v:IsA("Seat") then
                            v.CanTouch = false
                        end
                    end
                end
            end
        end

        -- Função de rastrear e void kill
        local function TrackAndKill()
            while true do
                local target = GetSelectedPlayer()
                if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
                    local targetRoot = target.Character.HumanoidRootPart
                    local targetHum = target.Character:FindFirstChildOfClass("Humanoid")
                    if targetHum and targetHum.Sit then
                        if char and char:FindFirstChildOfClass("Humanoid") then
                            bus:SetPrimaryPartCFrame(CFrame.new(9999, -450, 9999))
                            print("Jogador sentou. Void kill ativado.")
                            task.wait(0.2)
                            char.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                            task.wait(0.5)
                            root.CFrame = originalPos
                            print("Teleportado de volta.")
                        end
                        break
                    else
                        local t = tick() * 35
                        local offsetX = math.sin(t) * 4
                        local offsetZ = math.cos(t) * 20
                        bus:SetPrimaryPartCFrame(targetRoot.CFrame * CFrame.new(offsetX, 0, offsetZ))
                    end
                end
                RunService.RenderStepped:Wait()
            end
        end

        spawn(TrackAndKill)
    end
})
